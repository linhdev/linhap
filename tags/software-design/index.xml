<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software design on </title>
    <link>https://linhdev.github.io/tags/software-design/</link>
    <description>Recent content in Software design on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 04 Dec 2021 11:39:16 +0200</lastBuildDate><atom:link href="https://linhdev.github.io/tags/software-design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>HashMap Knowledge in Java</title>
      <link>https://linhdev.github.io/tim-hieu-hashmap-trong-java/</link>
      <pubDate>Sat, 04 Dec 2021 11:39:16 +0200</pubDate>
      
      <guid>https://linhdev.github.io/tim-hieu-hashmap-trong-java/</guid>
      <description>Những thứ cần biết về hashmap Hôm nay là một ngày cuối tuần không phải OT, cũng giống như nhưng buổi tuần trước đó thường sẽ ngủ một giấc tới lúc hoàng hôn mới dậy(đấy là mình nghĩ thế thôi). Chả là hôm trước ở công ty thấy các bạn tts ở công ty mình đang được anh Lead đứng lớp java core đang học đến phần Collections: List, Vector, LinkedList, Set&amp;hellip; có phần riêng biệt đó là Map trong java.</description>
    </item>
    
    <item>
      <title>Research Solid Principle</title>
      <link>https://linhdev.github.io/tim-hieu-ve-nguyen-li-solid/</link>
      <pubDate>Sun, 07 Nov 2021 11:39:16 +0200</pubDate>
      
      <guid>https://linhdev.github.io/tim-hieu-ve-nguyen-li-solid/</guid>
      <description>Nguyên Lý SOLID Thần Thánh Trước khi tìm hiểu về design patterns cần phải nắm được nhưng nguyên tắc cơ bản nhất của nó, và SOLID là 5 nguyên tắc cơ bản mà ta cần phải biết với mỗi 1 chữ cái sẽ tương ứng đại diện cho 1 nguyên tắc.
S: Single Responsibility Principle: tức là ý nghĩa của nguyên tắc này là mỗi 1 class chỉ nên đảm nhiệm 1 vai trò nhất định giả sử như là mình có 1 class là Employee trong nó đang có chức năng in ra thông tin của nhân viên mà bây h viết thêm 1 chức năng báo cáo lương của nhân viên vào trong 1 cùng 1 class đó, như thế khi nhìn vào code sẽ rất là phức tạp lúc này nên tách nó riêng là thành 2 class khác nhau: 1 class là Employee 1 class ReportSalary.</description>
    </item>
    
    <item>
      <title>Research Review of Design Pattern Mining</title>
      <link>https://linhdev.github.io/tim-hieu-ve-design-pattern/</link>
      <pubDate>Fri, 19 Jun 2020 07:26:15 +1300</pubDate>
      
      <guid>https://linhdev.github.io/tim-hieu-ve-design-pattern/</guid>
      <description>Design pattern Có rất nhiều tiêu chí để đánh giá đâu là 1 hệ thống tốt, chẳng hạn như về phía khách hàng: phần mềm phải có giao diện thân thiện, tốc độ xử lý nhanh ko gặp lỗi or trục trặc gì trong quá trình sử dụng phần mềm, về phía kỹ thuật phần mềm tốt có thể là: dễ dàng bảo trì, nâng cấp dễ dàng quản lý triển khai thì để có được điều này việc phát triển phần mềm có thể phụ thuộc vào 1 số yếu tố sau:</description>
    </item>
    
  </channel>
</rss>
